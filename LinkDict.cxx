//
// File generated by rootcint at Sun Aug  2 12:44:35 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME LinkDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "LinkDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wuDGSEVENT wuDGSEVENT;
      #else
      class wuDGSEVENT  {
         public:
         //friend XX;
         unsigned short tpe; //实际的探测器类型 tpe[1Ge/2BGO/3SIDE] 
         unsigned short tid; //实际的探测器编号 tid[1-110] 
         G__uint64 event_timestamp; //时间戳
         G__uint64 last_disc_timestamp; //Timestamp of previous discriminator 上一个触发的时间戳的后30位
         G__uint64 peak_timestamp; //Timestamp of peak detect
         bool timestamp_match_flag; //TSM 有用 
         bool cfd_valid_flag; //CV  有用	                   
         bool peak_valid_flag; //PV  有用
         bool pileup_flag; //PU   有用
         int sampled_baseline; //sampled baseline   有用
         int cfd_sample_0; //CFD Sample 0   有用
         int cfd_sample_1; //CFD Sample 1   有用
         int cfd_sample_2; //CFD Sample 2   有用
         int sum1; //pre-rise sum   有用
         int sum2; //post-rise sum   有用
         unsigned short m2begin; //post-rise end sample   有用
         unsigned short m2end; //post-rise begin sample   有用
         unsigned short m1begin; //pre-rise begin sample   有用
         unsigned short m1end; //pre-rise end sample   有用
         unsigned short peak_sample; //peak sample   有用
         unsigned short base_sample; //base sample   有用
         unsigned short m2last_begin_sample; //
         unsigned short m2last_end_sample; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wuDFMAEVENT wuDFMAEVENT;
      #else
      class wuDFMAEVENT  {
         public:
         //friend XX;
         int ch; //计算得到 (postrisesum-prerisesum)/10
         unsigned short tpe; //
         unsigned short tid; //通过变量 id 转换而来。实际的探测器编号
         G__uint64 ts; //
         int wheel; //extract wheel
         G__uint64 prets; //上一个事件的ts
         int baseline; //基线
         int postrisesum; //
         int prerisesum; //
         int m2_last_beg; //
         int m2_last_end; //
         int prerisebeg; //
         int preriseend; //
         int postrisebeg; //
         int postriseend; //not used
         int peaksample; //
         int basesample; //
         unsigned short traceLen; //
         short trace[8192]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DGSEVENT DGSEVENT;
      #else
      class DGSEVENT  {
         public:
         //friend XX;
         float ehi; //修正多普勒的能量
         float ehiraw; //计算的原始能量道址
         float ehi_nodop; //未修正多普勒的能量
         short id; //通过 board_id 和 chan_id 运算得到
         unsigned short tpe; //
         unsigned short tid; //通过变量 id 转换而来。实际的探测器编号 tpe[1Ge/2BGO/3SIDE]  tid[1-110] 
         unsigned short flag; //反康标记
         unsigned short board_id; //硬件信息
         unsigned short chan_id; //硬件信息
         unsigned short geo_addr; //硬件信息
         unsigned short packet_length; //数据信息
         unsigned short header_type; //数据信息  4
         unsigned short event_type; //数据信息   0
         unsigned short header_length; //数据信息 28
         G__uint64 event_timestamp; //时间戳，记得输出没有time walk 修正的
         G__uint64 last_disc_timestamp; //Timestamp of previous discriminator 上一个触发的时间戳的后30位
         G__uint64 peak_timestamp; //Timestamp of peak detect
         unsigned short timestamp_match_flag; //TSM 有用 
         unsigned short external_disc_flag; //ED    0 应该没用
         unsigned short cfd_valid_flag; //CV  有用
         unsigned short pileup_only_flag; //PO     0 应该没用
         unsigned short offset_flag; //OF     0 应该没用
         unsigned short sync_error_flag; //SE     0 应该没用
         unsigned short general_error_flag; //GE     0 应该没用
         unsigned short peak_valid_flag; //PV  有用
         unsigned short pileup_flag; //PU   有用
         int sampled_baseline; //sampled baseline   有用
         int cfd_sample_0; //CFD Sample 0   有用
         int cfd_sample_1; //CFD Sample 1   有用
         int cfd_sample_2; //CFD Sample 2   有用
         int sum1; //pre-rise sum   有用
         int sum2; //post-rise sum   有用
         unsigned short m2end; //post-rise begin sample   有用
         float cfd_interpolate; //should be added to TS for additional accuracy - in 10ns units.
         unsigned short m2begin; //post-rise end sample   有用
         unsigned short m2last_begin_sample; //
         unsigned short m2last_end_sample; //
         unsigned short m1begin; //pre-rise begin sample   有用
         unsigned short m1end; //pre-rise end sample   有用
         unsigned short peak_sample; //peak sample   有用
         unsigned short base_sample; //base sample   有用
         int baseline; //计算得到  (m2begin+m2end)/2
         unsigned short traceLen; //波形长度 4 
         short trace[8192]; //
         G__uint64 LEDts; //
         G__uint64 CFDts; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DFMAEVENT DFMAEVENT;
      #else
      class DFMAEVENT  {
         public:
         //friend XX;
         int ehi; //WAS SHORT INT    计算得到 (postrisesum-prerisesum)/10
         short id; //通过 board_id 和 chan_id 运算得到
         unsigned short tpe; //
         unsigned short tid; //通过变量 id 转换而来。实际的探测器编号
         unsigned short board_id; //硬件信息
         unsigned short chan_id; //硬件信息
         G__uint64 LEDts; //extract the LED time stamp
         G__uint64 CFDts; //
         G__uint64 PEAKts; //
         char flag; //
         char pu; //
         int d2t0; //
         int d2t1; //
         int d2t2; //
         int wheel; //extract wheel
         G__uint64 prevTS; //上一个事件的ts
         int baseline; //基线
         int postrisesum; //
         int prerisesum; //
         int m2_last_beg; //
         int m2_last_end; //
         int prerisebeg; //
         int preriseend; //
         int postrisebeg; //
         int postriseend; //not used
         int peaksample; //
         int basesample; //
         int header_type; //数据信息
         unsigned short traceLen; //波形长度
         short trace[8192]; //波形
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void wuDGSEVENT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wuDGSEVENT_Dictionary();
   static void *new_wuDGSEVENT(void *p = 0);
   static void *newArray_wuDGSEVENT(Long_t size, void *p);
   static void delete_wuDGSEVENT(void *p);
   static void deleteArray_wuDGSEVENT(void *p);
   static void destruct_wuDGSEVENT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::wuDGSEVENT*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wuDGSEVENT) == sizeof( ::ROOTShadow::Shadow::wuDGSEVENT));
      ::wuDGSEVENT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wuDGSEVENT),0);
      static ::ROOT::TGenericClassInfo 
         instance("wuDGSEVENT", "./GTMerge.h", 94,
                  typeid(::wuDGSEVENT), ::ROOT::DefineBehavior(ptr, ptr),
                  &wuDGSEVENT_ShowMembers, &wuDGSEVENT_Dictionary, isa_proxy, 4,
                  sizeof(::wuDGSEVENT) );
      instance.SetNew(&new_wuDGSEVENT);
      instance.SetNewArray(&newArray_wuDGSEVENT);
      instance.SetDelete(&delete_wuDGSEVENT);
      instance.SetDeleteArray(&deleteArray_wuDGSEVENT);
      instance.SetDestructor(&destruct_wuDGSEVENT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::wuDGSEVENT*)
   {
      return GenerateInitInstanceLocal((::wuDGSEVENT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wuDGSEVENT*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wuDGSEVENT_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::wuDGSEVENT*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void wuDFMAEVENT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wuDFMAEVENT_Dictionary();
   static void *new_wuDFMAEVENT(void *p = 0);
   static void *newArray_wuDFMAEVENT(Long_t size, void *p);
   static void delete_wuDFMAEVENT(void *p);
   static void deleteArray_wuDFMAEVENT(void *p);
   static void destruct_wuDFMAEVENT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::wuDFMAEVENT*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wuDFMAEVENT) == sizeof( ::ROOTShadow::Shadow::wuDFMAEVENT));
      ::wuDFMAEVENT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wuDFMAEVENT),0);
      static ::ROOT::TGenericClassInfo 
         instance("wuDFMAEVENT", "./GTMerge.h", 120,
                  typeid(::wuDFMAEVENT), ::ROOT::DefineBehavior(ptr, ptr),
                  &wuDFMAEVENT_ShowMembers, &wuDFMAEVENT_Dictionary, isa_proxy, 4,
                  sizeof(::wuDFMAEVENT) );
      instance.SetNew(&new_wuDFMAEVENT);
      instance.SetNewArray(&newArray_wuDFMAEVENT);
      instance.SetDelete(&delete_wuDFMAEVENT);
      instance.SetDeleteArray(&deleteArray_wuDFMAEVENT);
      instance.SetDestructor(&destruct_wuDFMAEVENT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::wuDFMAEVENT*)
   {
      return GenerateInitInstanceLocal((::wuDFMAEVENT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wuDFMAEVENT*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wuDFMAEVENT_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::wuDFMAEVENT*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DGSEVENT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DGSEVENT_Dictionary();
   static void *new_DGSEVENT(void *p = 0);
   static void *newArray_DGSEVENT(Long_t size, void *p);
   static void delete_DGSEVENT(void *p);
   static void deleteArray_DGSEVENT(void *p);
   static void destruct_DGSEVENT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DGSEVENT*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DGSEVENT) == sizeof( ::ROOTShadow::Shadow::DGSEVENT));
      ::DGSEVENT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DGSEVENT),0);
      static ::ROOT::TGenericClassInfo 
         instance("DGSEVENT", "./GTMerge.h", 194,
                  typeid(::DGSEVENT), ::ROOT::DefineBehavior(ptr, ptr),
                  &DGSEVENT_ShowMembers, &DGSEVENT_Dictionary, isa_proxy, 4,
                  sizeof(::DGSEVENT) );
      instance.SetNew(&new_DGSEVENT);
      instance.SetNewArray(&newArray_DGSEVENT);
      instance.SetDelete(&delete_DGSEVENT);
      instance.SetDeleteArray(&deleteArray_DGSEVENT);
      instance.SetDestructor(&destruct_DGSEVENT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DGSEVENT*)
   {
      return GenerateInitInstanceLocal((::DGSEVENT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DGSEVENT*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DGSEVENT_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DGSEVENT*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DFMAEVENT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DFMAEVENT_Dictionary();
   static void *new_DFMAEVENT(void *p = 0);
   static void *newArray_DFMAEVENT(Long_t size, void *p);
   static void delete_DFMAEVENT(void *p);
   static void deleteArray_DFMAEVENT(void *p);
   static void destruct_DFMAEVENT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DFMAEVENT*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DFMAEVENT) == sizeof( ::ROOTShadow::Shadow::DFMAEVENT));
      ::DFMAEVENT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DFMAEVENT),0);
      static ::ROOT::TGenericClassInfo 
         instance("DFMAEVENT", "./GTMerge.h", 238,
                  typeid(::DFMAEVENT), ::ROOT::DefineBehavior(ptr, ptr),
                  &DFMAEVENT_ShowMembers, &DFMAEVENT_Dictionary, isa_proxy, 4,
                  sizeof(::DFMAEVENT) );
      instance.SetNew(&new_DFMAEVENT);
      instance.SetNewArray(&newArray_DFMAEVENT);
      instance.SetDelete(&delete_DFMAEVENT);
      instance.SetDeleteArray(&deleteArray_DFMAEVENT);
      instance.SetDestructor(&destruct_DFMAEVENT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DFMAEVENT*)
   {
      return GenerateInitInstanceLocal((::DFMAEVENT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DFMAEVENT*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DFMAEVENT_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DFMAEVENT*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
namespace ROOTDict {
   void wuDGSEVENT_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wuDGSEVENT.
      typedef ::ROOTShadow::Shadow::wuDGSEVENT ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::wuDGSEVENT*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpe", &sobj->tpe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tid", &sobj->tid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_timestamp", &sobj->event_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "last_disc_timestamp", &sobj->last_disc_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_timestamp", &sobj->peak_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp_match_flag", &sobj->timestamp_match_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_valid_flag", &sobj->cfd_valid_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_valid_flag", &sobj->peak_valid_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pileup_flag", &sobj->pileup_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sampled_baseline", &sobj->sampled_baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_0", &sobj->cfd_sample_0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_1", &sobj->cfd_sample_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_2", &sobj->cfd_sample_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum1", &sobj->sum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum2", &sobj->sum2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2begin", &sobj->m2begin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2end", &sobj->m2end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m1begin", &sobj->m1begin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m1end", &sobj->m1end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_sample", &sobj->peak_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "base_sample", &sobj->base_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2last_begin_sample", &sobj->m2last_begin_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2last_end_sample", &sobj->m2last_end_sample);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_wuDGSEVENT(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wuDGSEVENT : new ::wuDGSEVENT;
   }
   static void *newArray_wuDGSEVENT(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wuDGSEVENT[nElements] : new ::wuDGSEVENT[nElements];
   }
   // Wrapper around operator delete
   static void delete_wuDGSEVENT(void *p) {
      delete ((::wuDGSEVENT*)p);
   }
   static void deleteArray_wuDGSEVENT(void *p) {
      delete [] ((::wuDGSEVENT*)p);
   }
   static void destruct_wuDGSEVENT(void *p) {
      typedef ::wuDGSEVENT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::wuDGSEVENT

//______________________________________________________________________________
namespace ROOTDict {
   void DGSEVENT_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DGSEVENT.
      typedef ::ROOTShadow::Shadow::DGSEVENT ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DGSEVENT*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehi", &sobj->ehi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehiraw", &sobj->ehiraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehi_nodop", &sobj->ehi_nodop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &sobj->id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpe", &sobj->tpe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tid", &sobj->tid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &sobj->flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "board_id", &sobj->board_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chan_id", &sobj->chan_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geo_addr", &sobj->geo_addr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "packet_length", &sobj->packet_length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header_type", &sobj->header_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_type", &sobj->event_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header_length", &sobj->header_length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_timestamp", &sobj->event_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "last_disc_timestamp", &sobj->last_disc_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_timestamp", &sobj->peak_timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp_match_flag", &sobj->timestamp_match_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "external_disc_flag", &sobj->external_disc_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_valid_flag", &sobj->cfd_valid_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pileup_only_flag", &sobj->pileup_only_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset_flag", &sobj->offset_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sync_error_flag", &sobj->sync_error_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "general_error_flag", &sobj->general_error_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_valid_flag", &sobj->peak_valid_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pileup_flag", &sobj->pileup_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sampled_baseline", &sobj->sampled_baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_0", &sobj->cfd_sample_0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_1", &sobj->cfd_sample_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_sample_2", &sobj->cfd_sample_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum1", &sobj->sum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum2", &sobj->sum2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2end", &sobj->m2end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd_interpolate", &sobj->cfd_interpolate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2begin", &sobj->m2begin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2last_begin_sample", &sobj->m2last_begin_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2last_end_sample", &sobj->m2last_end_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m1begin", &sobj->m1begin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m1end", &sobj->m1end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_sample", &sobj->peak_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "base_sample", &sobj->base_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &sobj->baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "traceLen", &sobj->traceLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trace[8192]", sobj->trace);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LEDts", &sobj->LEDts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFDts", &sobj->CFDts);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DGSEVENT(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DGSEVENT : new ::DGSEVENT;
   }
   static void *newArray_DGSEVENT(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DGSEVENT[nElements] : new ::DGSEVENT[nElements];
   }
   // Wrapper around operator delete
   static void delete_DGSEVENT(void *p) {
      delete ((::DGSEVENT*)p);
   }
   static void deleteArray_DGSEVENT(void *p) {
      delete [] ((::DGSEVENT*)p);
   }
   static void destruct_DGSEVENT(void *p) {
      typedef ::DGSEVENT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DGSEVENT

//______________________________________________________________________________
namespace ROOTDict {
   void DFMAEVENT_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DFMAEVENT.
      typedef ::ROOTShadow::Shadow::DFMAEVENT ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DFMAEVENT*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehi", &sobj->ehi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &sobj->id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpe", &sobj->tpe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tid", &sobj->tid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "board_id", &sobj->board_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chan_id", &sobj->chan_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LEDts", &sobj->LEDts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFDts", &sobj->CFDts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PEAKts", &sobj->PEAKts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &sobj->flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pu", &sobj->pu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2t0", &sobj->d2t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2t1", &sobj->d2t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2t2", &sobj->d2t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wheel", &sobj->wheel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prevTS", &sobj->prevTS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &sobj->baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postrisesum", &sobj->postrisesum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prerisesum", &sobj->prerisesum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2_last_beg", &sobj->m2_last_beg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2_last_end", &sobj->m2_last_end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prerisebeg", &sobj->prerisebeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preriseend", &sobj->preriseend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postrisebeg", &sobj->postrisebeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postriseend", &sobj->postriseend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peaksample", &sobj->peaksample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "basesample", &sobj->basesample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header_type", &sobj->header_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "traceLen", &sobj->traceLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trace[8192]", sobj->trace);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DFMAEVENT(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DFMAEVENT : new ::DFMAEVENT;
   }
   static void *newArray_DFMAEVENT(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DFMAEVENT[nElements] : new ::DFMAEVENT[nElements];
   }
   // Wrapper around operator delete
   static void delete_DFMAEVENT(void *p) {
      delete ((::DFMAEVENT*)p);
   }
   static void deleteArray_DFMAEVENT(void *p) {
      delete [] ((::DFMAEVENT*)p);
   }
   static void destruct_DFMAEVENT(void *p) {
      typedef ::DFMAEVENT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DFMAEVENT

//______________________________________________________________________________
namespace ROOTDict {
   void wuDFMAEVENT_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wuDFMAEVENT.
      typedef ::ROOTShadow::Shadow::wuDFMAEVENT ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::wuDFMAEVENT*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch", &sobj->ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpe", &sobj->tpe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tid", &sobj->tid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ts", &sobj->ts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wheel", &sobj->wheel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prets", &sobj->prets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &sobj->baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postrisesum", &sobj->postrisesum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prerisesum", &sobj->prerisesum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2_last_beg", &sobj->m2_last_beg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m2_last_end", &sobj->m2_last_end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prerisebeg", &sobj->prerisebeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preriseend", &sobj->preriseend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postrisebeg", &sobj->postrisebeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "postriseend", &sobj->postriseend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peaksample", &sobj->peaksample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "basesample", &sobj->basesample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "traceLen", &sobj->traceLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trace[8192]", sobj->trace);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_wuDFMAEVENT(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wuDFMAEVENT : new ::wuDFMAEVENT;
   }
   static void *newArray_wuDFMAEVENT(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wuDFMAEVENT[nElements] : new ::wuDFMAEVENT[nElements];
   }
   // Wrapper around operator delete
   static void delete_wuDFMAEVENT(void *p) {
      delete ((::wuDFMAEVENT*)p);
   }
   static void deleteArray_wuDFMAEVENT(void *p) {
      delete [] ((::wuDFMAEVENT*)p);
   }
   static void destruct_wuDFMAEVENT(void *p) {
      typedef ::wuDFMAEVENT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::wuDFMAEVENT

namespace ROOTDict {
   void vectorlEDFMAEVENTgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDFMAEVENTgR_Dictionary();
   static void *new_vectorlEDFMAEVENTgR(void *p = 0);
   static void *newArray_vectorlEDFMAEVENTgR(Long_t size, void *p);
   static void delete_vectorlEDFMAEVENTgR(void *p);
   static void deleteArray_vectorlEDFMAEVENTgR(void *p);
   static void destruct_vectorlEDFMAEVENTgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<DFMAEVENT>*)
   {
      vector<DFMAEVENT> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DFMAEVENT>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DFMAEVENT>", -2, "prec_stl/vector", 49,
                  typeid(vector<DFMAEVENT>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEDFMAEVENTgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<DFMAEVENT>) );
      instance.SetNew(&new_vectorlEDFMAEVENTgR);
      instance.SetNewArray(&newArray_vectorlEDFMAEVENTgR);
      instance.SetDelete(&delete_vectorlEDFMAEVENTgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDFMAEVENTgR);
      instance.SetDestructor(&destruct_vectorlEDFMAEVENTgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<DFMAEVENT> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DFMAEVENT>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDFMAEVENTgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<DFMAEVENT>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEDFMAEVENTgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DFMAEVENT> : new vector<DFMAEVENT>;
   }
   static void *newArray_vectorlEDFMAEVENTgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DFMAEVENT>[nElements] : new vector<DFMAEVENT>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDFMAEVENTgR(void *p) {
      delete ((vector<DFMAEVENT>*)p);
   }
   static void deleteArray_vectorlEDFMAEVENTgR(void *p) {
      delete [] ((vector<DFMAEVENT>*)p);
   }
   static void destruct_vectorlEDFMAEVENTgR(void *p) {
      typedef vector<DFMAEVENT> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<DFMAEVENT>

namespace ROOTDict {
   void vectorlEDGSEVENTgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDGSEVENTgR_Dictionary();
   static void *new_vectorlEDGSEVENTgR(void *p = 0);
   static void *newArray_vectorlEDGSEVENTgR(Long_t size, void *p);
   static void delete_vectorlEDGSEVENTgR(void *p);
   static void deleteArray_vectorlEDGSEVENTgR(void *p);
   static void destruct_vectorlEDGSEVENTgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<DGSEVENT>*)
   {
      vector<DGSEVENT> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DGSEVENT>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DGSEVENT>", -2, "prec_stl/vector", 49,
                  typeid(vector<DGSEVENT>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEDGSEVENTgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<DGSEVENT>) );
      instance.SetNew(&new_vectorlEDGSEVENTgR);
      instance.SetNewArray(&newArray_vectorlEDGSEVENTgR);
      instance.SetDelete(&delete_vectorlEDGSEVENTgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDGSEVENTgR);
      instance.SetDestructor(&destruct_vectorlEDGSEVENTgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<DGSEVENT> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DGSEVENT>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDGSEVENTgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<DGSEVENT>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEDGSEVENTgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DGSEVENT> : new vector<DGSEVENT>;
   }
   static void *newArray_vectorlEDGSEVENTgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DGSEVENT>[nElements] : new vector<DGSEVENT>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDGSEVENTgR(void *p) {
      delete ((vector<DGSEVENT>*)p);
   }
   static void deleteArray_vectorlEDGSEVENTgR(void *p) {
      delete [] ((vector<DGSEVENT>*)p);
   }
   static void destruct_vectorlEDGSEVENTgR(void *p) {
      typedef vector<DGSEVENT> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<DGSEVENT>

namespace ROOTDict {
   void vectorlEwuDFMAEVENTgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwuDFMAEVENTgR_Dictionary();
   static void *new_vectorlEwuDFMAEVENTgR(void *p = 0);
   static void *newArray_vectorlEwuDFMAEVENTgR(Long_t size, void *p);
   static void delete_vectorlEwuDFMAEVENTgR(void *p);
   static void deleteArray_vectorlEwuDFMAEVENTgR(void *p);
   static void destruct_vectorlEwuDFMAEVENTgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<wuDFMAEVENT>*)
   {
      vector<wuDFMAEVENT> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wuDFMAEVENT>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wuDFMAEVENT>", -2, "prec_stl/vector", 49,
                  typeid(vector<wuDFMAEVENT>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEwuDFMAEVENTgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<wuDFMAEVENT>) );
      instance.SetNew(&new_vectorlEwuDFMAEVENTgR);
      instance.SetNewArray(&newArray_vectorlEwuDFMAEVENTgR);
      instance.SetDelete(&delete_vectorlEwuDFMAEVENTgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwuDFMAEVENTgR);
      instance.SetDestructor(&destruct_vectorlEwuDFMAEVENTgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<wuDFMAEVENT> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wuDFMAEVENT>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwuDFMAEVENTgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<wuDFMAEVENT>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEwuDFMAEVENTgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wuDFMAEVENT> : new vector<wuDFMAEVENT>;
   }
   static void *newArray_vectorlEwuDFMAEVENTgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wuDFMAEVENT>[nElements] : new vector<wuDFMAEVENT>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwuDFMAEVENTgR(void *p) {
      delete ((vector<wuDFMAEVENT>*)p);
   }
   static void deleteArray_vectorlEwuDFMAEVENTgR(void *p) {
      delete [] ((vector<wuDFMAEVENT>*)p);
   }
   static void destruct_vectorlEwuDFMAEVENTgR(void *p) {
      typedef vector<wuDFMAEVENT> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<wuDFMAEVENT>

namespace ROOTDict {
   void vectorlEwuDGSEVENTgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwuDGSEVENTgR_Dictionary();
   static void *new_vectorlEwuDGSEVENTgR(void *p = 0);
   static void *newArray_vectorlEwuDGSEVENTgR(Long_t size, void *p);
   static void delete_vectorlEwuDGSEVENTgR(void *p);
   static void deleteArray_vectorlEwuDGSEVENTgR(void *p);
   static void destruct_vectorlEwuDGSEVENTgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<wuDGSEVENT>*)
   {
      vector<wuDGSEVENT> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wuDGSEVENT>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wuDGSEVENT>", -2, "prec_stl/vector", 49,
                  typeid(vector<wuDGSEVENT>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEwuDGSEVENTgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<wuDGSEVENT>) );
      instance.SetNew(&new_vectorlEwuDGSEVENTgR);
      instance.SetNewArray(&newArray_vectorlEwuDGSEVENTgR);
      instance.SetDelete(&delete_vectorlEwuDGSEVENTgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwuDGSEVENTgR);
      instance.SetDestructor(&destruct_vectorlEwuDGSEVENTgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<wuDGSEVENT> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wuDGSEVENT>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwuDGSEVENTgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<wuDGSEVENT>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEwuDGSEVENTgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wuDGSEVENT> : new vector<wuDGSEVENT>;
   }
   static void *newArray_vectorlEwuDGSEVENTgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wuDGSEVENT>[nElements] : new vector<wuDGSEVENT>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwuDGSEVENTgR(void *p) {
      delete ((vector<wuDGSEVENT>*)p);
   }
   static void deleteArray_vectorlEwuDGSEVENTgR(void *p) {
      delete [] ((vector<wuDGSEVENT>*)p);
   }
   static void destruct_vectorlEwuDGSEVENTgR(void *p) {
      typedef vector<wuDGSEVENT> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<wuDGSEVENT>

/********************************************************
* LinkDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableLinkDict();

extern "C" void G__set_cpp_environmentLinkDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GTMerge.h");
  G__cpp_reset_tagtableLinkDict();
}
#include <new>
extern "C" int G__cpp_dllrevLinkDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* wuDGSEVENT */
// automatic default constructor
static int G__LinkDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wuDGSEVENT *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wuDGSEVENT[n];
     } else {
       p = new((void*) gvp) wuDGSEVENT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wuDGSEVENT;
     } else {
       p = new((void*) gvp) wuDGSEVENT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LinkDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   wuDGSEVENT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new wuDGSEVENT(*(wuDGSEVENT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wuDGSEVENT G__TwuDGSEVENT;
static int G__LinkDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wuDGSEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wuDGSEVENT*) (soff+(sizeof(wuDGSEVENT)*i)))->~G__TwuDGSEVENT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wuDGSEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wuDGSEVENT*) (soff))->~G__TwuDGSEVENT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LinkDict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wuDGSEVENT* dest = (wuDGSEVENT*) G__getstructoffset();
   *dest = *(wuDGSEVENT*) libp->para[0].ref;
   const wuDGSEVENT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wuDFMAEVENT */
// automatic default constructor
static int G__LinkDict_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wuDFMAEVENT *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wuDFMAEVENT[n];
     } else {
       p = new((void*) gvp) wuDFMAEVENT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wuDFMAEVENT;
     } else {
       p = new((void*) gvp) wuDFMAEVENT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LinkDict_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   wuDFMAEVENT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new wuDFMAEVENT(*(wuDFMAEVENT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wuDFMAEVENT G__TwuDFMAEVENT;
static int G__LinkDict_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wuDFMAEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wuDFMAEVENT*) (soff+(sizeof(wuDFMAEVENT)*i)))->~G__TwuDFMAEVENT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wuDFMAEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wuDFMAEVENT*) (soff))->~G__TwuDFMAEVENT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LinkDict_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wuDFMAEVENT* dest = (wuDFMAEVENT*) G__getstructoffset();
   *dest = *(wuDFMAEVENT*) libp->para[0].ref;
   const wuDFMAEVENT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DGSEVENT */
// automatic default constructor
static int G__LinkDict_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DGSEVENT *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DGSEVENT[n];
     } else {
       p = new((void*) gvp) DGSEVENT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DGSEVENT;
     } else {
       p = new((void*) gvp) DGSEVENT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LinkDict_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DGSEVENT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DGSEVENT(*(DGSEVENT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DGSEVENT G__TDGSEVENT;
static int G__LinkDict_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DGSEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DGSEVENT*) (soff+(sizeof(DGSEVENT)*i)))->~G__TDGSEVENT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DGSEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DGSEVENT*) (soff))->~G__TDGSEVENT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LinkDict_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DGSEVENT* dest = (DGSEVENT*) G__getstructoffset();
   *dest = *(DGSEVENT*) libp->para[0].ref;
   const DGSEVENT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DFMAEVENT */
// automatic default constructor
static int G__LinkDict_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DFMAEVENT *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DFMAEVENT[n];
     } else {
       p = new((void*) gvp) DFMAEVENT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DFMAEVENT;
     } else {
       p = new((void*) gvp) DFMAEVENT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LinkDict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DFMAEVENT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DFMAEVENT(*(DFMAEVENT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DFMAEVENT G__TDFMAEVENT;
static int G__LinkDict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DFMAEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DFMAEVENT*) (soff+(sizeof(DFMAEVENT)*i)))->~G__TDFMAEVENT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DFMAEVENT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DFMAEVENT*) (soff))->~G__TDFMAEVENT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LinkDict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DFMAEVENT* dest = (DFMAEVENT*) G__getstructoffset();
   *dest = *(DFMAEVENT*) libp->para[0].ref;
   const DFMAEVENT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<wuDGSEVENT,allocator<wuDGSEVENT> > */
static int G__LinkDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reference obj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->at((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_reference obj = ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->at((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator* pobj;
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator xobj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->begin();
         pobj = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator* pobj;
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator xobj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->end();
         pobj = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator* pobj;
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator xobj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->rbegin();
         pobj = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator* pobj;
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator xobj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->rend();
         pobj = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->resize((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->resize((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]), *((wuDGSEVENT*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reference obj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->operator[]((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_reference obj = ((const vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->operator[]((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDGSEVENT,allocator<wuDGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >[n];
     } else {
       p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >;
     } else {
       p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDGSEVENT,allocator<wuDGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]), *(wuDGSEVENT*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]), *(wuDGSEVENT*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDGSEVENT,allocator<wuDGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >(*(vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >(*(vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDGSEVENT,allocator<wuDGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<wuDGSEVENT,allocator<wuDGSEVENT> >(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<wuDGSEVENT,allocator<wuDGSEVENT> >& obj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->operator=(*(vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->reserve((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wuDGSEVENT& obj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wuDGSEVENT& obj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->push_back(*(wuDGSEVENT*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->swap(*(vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator* pobj;
         vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator xobj = ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->insert(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[0])), *(wuDGSEVENT*) libp->para[1].ref);
         pobj = new vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->insert(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[0])), *((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[1]))
, *((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->insert(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[0])), (vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type) G__int(libp->para[1])
, *(wuDGSEVENT*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->erase(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->erase(*((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[0])), *((vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_226_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<wuDGSEVENT,allocator<wuDGSEVENT> > G__TvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR;
static int G__LinkDict_226_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) (soff+(sizeof(vector<wuDGSEVENT,allocator<wuDGSEVENT> >)*i)))->~G__TvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<wuDGSEVENT,allocator<wuDGSEVENT> >*) (soff))->~G__TvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > */
static int G__LinkDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reference obj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->at((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_reference obj = ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->at((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator* pobj;
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator xobj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->begin();
         pobj = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator* pobj;
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator xobj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->end();
         pobj = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator* pobj;
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator xobj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->rbegin();
         pobj = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator* pobj;
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator xobj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->rend();
         pobj = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->resize((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->resize((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]), *((wuDFMAEVENT*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reference obj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->operator[]((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_reference obj = ((const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->operator[]((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >[n];
     } else {
       p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >;
     } else {
       p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]), *(wuDFMAEVENT*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]), *(wuDFMAEVENT*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >(*(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >(*(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >& obj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->operator=(*(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->reserve((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wuDFMAEVENT& obj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wuDFMAEVENT& obj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->push_back(*(wuDFMAEVENT*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->swap(*(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator* pobj;
         vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator xobj = ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->insert(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[0])), *(wuDFMAEVENT*) libp->para[1].ref);
         pobj = new vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->insert(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[0])), *((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[1]))
, *((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->insert(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[0])), (vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type) G__int(libp->para[1])
, *(wuDFMAEVENT*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->erase(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->erase(*((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[0])), *((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_230_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > G__TvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR;
static int G__LinkDict_230_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) (soff+(sizeof(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >)*i)))->~G__TvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*) (soff))->~G__TvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DGSEVENT,allocator<DGSEVENT> > */
static int G__LinkDict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::reference obj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->at((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::const_reference obj = ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->at((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator* pobj;
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator xobj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->begin();
         pobj = new vector<DGSEVENT,allocator<DGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator* pobj;
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator xobj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->end();
         pobj = new vector<DGSEVENT,allocator<DGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator* pobj;
         vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator xobj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->rbegin();
         pobj = new vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator* pobj;
         vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator xobj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->rend();
         pobj = new vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->resize((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->resize((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]), *((DGSEVENT*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::reference obj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->operator[]((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::const_reference obj = ((const vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->operator[]((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DGSEVENT,allocator<DGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DGSEVENT,allocator<DGSEVENT> >[n];
     } else {
       p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DGSEVENT,allocator<DGSEVENT> >;
     } else {
       p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DGSEVENT,allocator<DGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DGSEVENT,allocator<DGSEVENT> >((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]), *(DGSEVENT*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]), *(DGSEVENT*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DGSEVENT,allocator<DGSEVENT> >((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DGSEVENT,allocator<DGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DGSEVENT,allocator<DGSEVENT> >(*(vector<DGSEVENT,allocator<DGSEVENT> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >(*(vector<DGSEVENT,allocator<DGSEVENT> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DGSEVENT,allocator<DGSEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DGSEVENT,allocator<DGSEVENT> >(*((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<DGSEVENT,allocator<DGSEVENT> >(*((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DGSEVENT,allocator<DGSEVENT> >& obj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->operator=(*(vector<DGSEVENT,allocator<DGSEVENT> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->reserve((vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DGSEVENT& obj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DGSEVENT& obj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->push_back(*(DGSEVENT*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->swap(*(vector<DGSEVENT,allocator<DGSEVENT> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator* pobj;
         vector<DGSEVENT,allocator<DGSEVENT> >::iterator xobj = ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->insert(*((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[0])), *(DGSEVENT*) libp->para[1].ref);
         pobj = new vector<DGSEVENT,allocator<DGSEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->insert(*((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[0])), *((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[1]))
, *((vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->insert(*((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[0])), (vector<DGSEVENT,allocator<DGSEVENT> >::size_type) G__int(libp->para[1])
, *(DGSEVENT*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->erase(*((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->erase(*((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[0])), *((vector<DGSEVENT,allocator<DGSEVENT> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_234_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DGSEVENT,allocator<DGSEVENT> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DGSEVENT,allocator<DGSEVENT> > G__TvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR;
static int G__LinkDict_234_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DGSEVENT,allocator<DGSEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DGSEVENT,allocator<DGSEVENT> >*) (soff+(sizeof(vector<DGSEVENT,allocator<DGSEVENT> >)*i)))->~G__TvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DGSEVENT,allocator<DGSEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DGSEVENT,allocator<DGSEVENT> >*) (soff))->~G__TvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DFMAEVENT,allocator<DFMAEVENT> > */
static int G__LinkDict_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reference obj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->at((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::const_reference obj = ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->at((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator* pobj;
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator xobj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->begin();
         pobj = new vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator* pobj;
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator xobj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->end();
         pobj = new vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator* pobj;
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator xobj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->rbegin();
         pobj = new vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator* pobj;
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator xobj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->rend();
         pobj = new vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->resize((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->resize((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]), *((DFMAEVENT*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::reference obj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->operator[]((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::const_reference obj = ((const vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->operator[]((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DFMAEVENT,allocator<DFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DFMAEVENT,allocator<DFMAEVENT> >[n];
     } else {
       p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DFMAEVENT,allocator<DFMAEVENT> >;
     } else {
       p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DFMAEVENT,allocator<DFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DFMAEVENT,allocator<DFMAEVENT> >((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]), *(DFMAEVENT*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]), *(DFMAEVENT*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DFMAEVENT,allocator<DFMAEVENT> >((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DFMAEVENT,allocator<DFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DFMAEVENT,allocator<DFMAEVENT> >(*(vector<DFMAEVENT,allocator<DFMAEVENT> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >(*(vector<DFMAEVENT,allocator<DFMAEVENT> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DFMAEVENT,allocator<DFMAEVENT> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DFMAEVENT,allocator<DFMAEVENT> >(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<DFMAEVENT,allocator<DFMAEVENT> >(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[0])), *((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DFMAEVENT,allocator<DFMAEVENT> >& obj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->operator=(*(vector<DFMAEVENT,allocator<DFMAEVENT> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->reserve((vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DFMAEVENT& obj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DFMAEVENT& obj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->push_back(*(DFMAEVENT*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->swap(*(vector<DFMAEVENT,allocator<DFMAEVENT> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator* pobj;
         vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator xobj = ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->insert(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[0])), *(DFMAEVENT*) libp->para[1].ref);
         pobj = new vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->insert(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[0])), *((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[1]))
, *((vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->insert(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[0])), (vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type) G__int(libp->para[1])
, *(DFMAEVENT*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->erase(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->erase(*((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[0])), *((vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LinkDict_238_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DFMAEVENT,allocator<DFMAEVENT> > G__TvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR;
static int G__LinkDict_238_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DFMAEVENT,allocator<DFMAEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) (soff+(sizeof(vector<DFMAEVENT,allocator<DFMAEVENT> >)*i)))->~G__TvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DFMAEVENT,allocator<DFMAEVENT> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DFMAEVENT,allocator<DFMAEVENT> >*) (soff))->~G__TvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* wuDGSEVENT */

/* wuDFMAEVENT */

/* DGSEVENT */

/* DFMAEVENT */

/* vector<wuDGSEVENT,allocator<wuDGSEVENT> > */

/* vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > */

/* vector<DGSEVENT,allocator<DGSEVENT> > */

/* vector<DFMAEVENT,allocator<DFMAEVENT> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncLinkDict {
 public:
  G__Sizep2memfuncLinkDict(): p(&G__Sizep2memfuncLinkDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncLinkDict::*p)();
};

size_t G__get_sizep2memfuncLinkDict()
{
  G__Sizep2memfuncLinkDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceLinkDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableLinkDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("wuDGSEVENT",117,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("wuDFMAEVENT",117,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("DGSEVENT",117,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("DFMAEVENT",117,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wuDGSEVENT>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),1,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT),257,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wuDFMAEVENT>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),1,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT),257,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DGSEVENT>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),1,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT),257,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DFMAEVENT>",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),1,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT),257,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* wuDGSEVENT */
static void G__setup_memvarwuDGSEVENT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT));
   { wuDGSEVENT *p; p=(wuDGSEVENT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tpe)-(long)(p)),114,0,0,-1,-1,-1,1,"tpe=",0,"实际的探测器类型 tpe[1Ge/2BGO/3SIDE] ");
   G__memvar_setup((void*)((long)(&p->tid)-(long)(p)),114,0,0,-1,-1,-1,1,"tid=",0,"实际的探测器编号 tid[1-110] ");
   G__memvar_setup((void*)((long)(&p->event_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"event_timestamp=",0,"时间戳");
   G__memvar_setup((void*)((long)(&p->last_disc_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"last_disc_timestamp=",0,"Timestamp of previous discriminator 上一个触发的时间戳的后30位");
   G__memvar_setup((void*)((long)(&p->peak_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"peak_timestamp=",0,"Timestamp of peak detect");
   G__memvar_setup((void*)((long)(&p->timestamp_match_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"timestamp_match_flag=",0,"TSM 有用 ");
   G__memvar_setup((void*)((long)(&p->cfd_valid_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"cfd_valid_flag=",0,"CV  有用	                   ");
   G__memvar_setup((void*)((long)(&p->peak_valid_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"peak_valid_flag=",0,"PV  有用");
   G__memvar_setup((void*)((long)(&p->pileup_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"pileup_flag=",0,"PU   有用");
   G__memvar_setup((void*)((long)(&p->sampled_baseline)-(long)(p)),105,0,0,-1,-1,-1,1,"sampled_baseline=",0,"sampled baseline   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_0)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_0=",0,"CFD Sample 0   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_1)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_1=",0,"CFD Sample 1   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_2)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_2=",0,"CFD Sample 2   有用");
   G__memvar_setup((void*)((long)(&p->sum1)-(long)(p)),105,0,0,-1,-1,-1,1,"sum1=",0,"pre-rise sum   有用");
   G__memvar_setup((void*)((long)(&p->sum2)-(long)(p)),105,0,0,-1,-1,-1,1,"sum2=",0,"post-rise sum   有用");
   G__memvar_setup((void*)((long)(&p->m2begin)-(long)(p)),114,0,0,-1,-1,-1,1,"m2begin=",0,"post-rise end sample   有用");
   G__memvar_setup((void*)((long)(&p->m2end)-(long)(p)),114,0,0,-1,-1,-1,1,"m2end=",0,"post-rise begin sample   有用");
   G__memvar_setup((void*)((long)(&p->m1begin)-(long)(p)),114,0,0,-1,-1,-1,1,"m1begin=",0,"pre-rise begin sample   有用");
   G__memvar_setup((void*)((long)(&p->m1end)-(long)(p)),114,0,0,-1,-1,-1,1,"m1end=",0,"pre-rise end sample   有用");
   G__memvar_setup((void*)((long)(&p->peak_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"peak_sample=",0,"peak sample   有用");
   G__memvar_setup((void*)((long)(&p->base_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"base_sample=",0,"base sample   有用");
   G__memvar_setup((void*)((long)(&p->m2last_begin_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"m2last_begin_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2last_end_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"m2last_end_sample=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wuDFMAEVENT */
static void G__setup_memvarwuDFMAEVENT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT));
   { wuDFMAEVENT *p; p=(wuDFMAEVENT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ch)-(long)(p)),105,0,0,-1,-1,-1,1,"ch=",0,"计算得到 (postrisesum-prerisesum)/10");
   G__memvar_setup((void*)((long)(&p->tpe)-(long)(p)),114,0,0,-1,-1,-1,1,"tpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tid)-(long)(p)),114,0,0,-1,-1,-1,1,"tid=",0,"通过变量 id 转换而来。实际的探测器编号");
   G__memvar_setup((void*)((long)(&p->ts)-(long)(p)),109,0,0,-1,-1,-1,1,"ts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wheel)-(long)(p)),105,0,0,-1,-1,-1,1,"wheel=",0,"extract wheel");
   G__memvar_setup((void*)((long)(&p->prets)-(long)(p)),109,0,0,-1,-1,-1,1,"prets=",0,"上一个事件的ts");
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),105,0,0,-1,-1,-1,1,"baseline=",0,"基线");
   G__memvar_setup((void*)((long)(&p->postrisesum)-(long)(p)),105,0,0,-1,-1,-1,1,"postrisesum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prerisesum)-(long)(p)),105,0,0,-1,-1,-1,1,"prerisesum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2_last_beg)-(long)(p)),105,0,0,-1,-1,-1,1,"m2_last_beg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2_last_end)-(long)(p)),105,0,0,-1,-1,-1,1,"m2_last_end=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prerisebeg)-(long)(p)),105,0,0,-1,-1,-1,1,"prerisebeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->preriseend)-(long)(p)),105,0,0,-1,-1,-1,1,"preriseend=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->postrisebeg)-(long)(p)),105,0,0,-1,-1,-1,1,"postrisebeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->postriseend)-(long)(p)),105,0,0,-1,-1,-1,1,"postriseend=",0,"not used");
   G__memvar_setup((void*)((long)(&p->peaksample)-(long)(p)),105,0,0,-1,-1,-1,1,"peaksample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->basesample)-(long)(p)),105,0,0,-1,-1,-1,1,"basesample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->traceLen)-(long)(p)),114,0,0,-1,-1,-1,1,"traceLen=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trace)-(long)(p)),115,0,0,-1,-1,-1,1,"trace[8192]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DGSEVENT */
static void G__setup_memvarDGSEVENT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT));
   { DGSEVENT *p; p=(DGSEVENT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ehi)-(long)(p)),102,0,0,-1,-1,-1,1,"ehi=",0,"修正多普勒的能量");
   G__memvar_setup((void*)((long)(&p->ehiraw)-(long)(p)),102,0,0,-1,-1,-1,1,"ehiraw=",0,"计算的原始能量道址");
   G__memvar_setup((void*)((long)(&p->ehi_nodop)-(long)(p)),102,0,0,-1,-1,-1,1,"ehi_nodop=",0,"未修正多普勒的能量");
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),115,0,0,-1,-1,-1,1,"id=",0,"通过 board_id 和 chan_id 运算得到");
   G__memvar_setup((void*)((long)(&p->tpe)-(long)(p)),114,0,0,-1,-1,-1,1,"tpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tid)-(long)(p)),114,0,0,-1,-1,-1,1,"tid=",0,"通过变量 id 转换而来。实际的探测器编号 tpe[1Ge/2BGO/3SIDE]  tid[1-110] ");
   G__memvar_setup((void*)((long)(&p->flag)-(long)(p)),114,0,0,-1,-1,-1,1,"flag=",0,"反康标记");
   G__memvar_setup((void*)((long)(&p->board_id)-(long)(p)),114,0,0,-1,-1,-1,1,"board_id=",0,"硬件信息");
   G__memvar_setup((void*)((long)(&p->chan_id)-(long)(p)),114,0,0,-1,-1,-1,1,"chan_id=",0,"硬件信息");
   G__memvar_setup((void*)((long)(&p->geo_addr)-(long)(p)),114,0,0,-1,-1,-1,1,"geo_addr=",0,"硬件信息");
   G__memvar_setup((void*)((long)(&p->packet_length)-(long)(p)),114,0,0,-1,-1,-1,1,"packet_length=",0,"数据信息");
   G__memvar_setup((void*)((long)(&p->header_type)-(long)(p)),114,0,0,-1,-1,-1,1,"header_type=",0,"数据信息  4");
   G__memvar_setup((void*)((long)(&p->event_type)-(long)(p)),114,0,0,-1,-1,-1,1,"event_type=",0,"数据信息   0");
   G__memvar_setup((void*)((long)(&p->header_length)-(long)(p)),114,0,0,-1,-1,-1,1,"header_length=",0,"数据信息 28");
   G__memvar_setup((void*)((long)(&p->event_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"event_timestamp=",0,"时间戳，记得输出没有time walk 修正的");
   G__memvar_setup((void*)((long)(&p->last_disc_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"last_disc_timestamp=",0,"Timestamp of previous discriminator 上一个触发的时间戳的后30位");
   G__memvar_setup((void*)((long)(&p->peak_timestamp)-(long)(p)),109,0,0,-1,-1,-1,1,"peak_timestamp=",0,"Timestamp of peak detect");
   G__memvar_setup((void*)((long)(&p->timestamp_match_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"timestamp_match_flag=",0,"TSM 有用 ");
   G__memvar_setup((void*)((long)(&p->external_disc_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"external_disc_flag=",0,"ED    0 应该没用");
   G__memvar_setup((void*)((long)(&p->cfd_valid_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"cfd_valid_flag=",0,"CV  有用");
   G__memvar_setup((void*)((long)(&p->pileup_only_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"pileup_only_flag=",0,"PO     0 应该没用");
   G__memvar_setup((void*)((long)(&p->offset_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"offset_flag=",0,"OF     0 应该没用");
   G__memvar_setup((void*)((long)(&p->sync_error_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"sync_error_flag=",0,"SE     0 应该没用");
   G__memvar_setup((void*)((long)(&p->general_error_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"general_error_flag=",0,"GE     0 应该没用");
   G__memvar_setup((void*)((long)(&p->peak_valid_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"peak_valid_flag=",0,"PV  有用");
   G__memvar_setup((void*)((long)(&p->pileup_flag)-(long)(p)),114,0,0,-1,-1,-1,1,"pileup_flag=",0,"PU   有用");
   G__memvar_setup((void*)((long)(&p->sampled_baseline)-(long)(p)),105,0,0,-1,-1,-1,1,"sampled_baseline=",0,"sampled baseline   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_0)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_0=",0,"CFD Sample 0   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_1)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_1=",0,"CFD Sample 1   有用");
   G__memvar_setup((void*)((long)(&p->cfd_sample_2)-(long)(p)),105,0,0,-1,-1,-1,1,"cfd_sample_2=",0,"CFD Sample 2   有用");
   G__memvar_setup((void*)((long)(&p->sum1)-(long)(p)),105,0,0,-1,-1,-1,1,"sum1=",0,"pre-rise sum   有用");
   G__memvar_setup((void*)((long)(&p->sum2)-(long)(p)),105,0,0,-1,-1,-1,1,"sum2=",0,"post-rise sum   有用");
   G__memvar_setup((void*)((long)(&p->m2end)-(long)(p)),114,0,0,-1,-1,-1,1,"m2end=",0,"post-rise begin sample   有用");
   G__memvar_setup((void*)((long)(&p->cfd_interpolate)-(long)(p)),102,0,0,-1,-1,-1,1,"cfd_interpolate=",0,"should be added to TS for additional accuracy - in 10ns units.");
   G__memvar_setup((void*)((long)(&p->m2begin)-(long)(p)),114,0,0,-1,-1,-1,1,"m2begin=",0,"post-rise end sample   有用");
   G__memvar_setup((void*)((long)(&p->m2last_begin_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"m2last_begin_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2last_end_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"m2last_end_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m1begin)-(long)(p)),114,0,0,-1,-1,-1,1,"m1begin=",0,"pre-rise begin sample   有用");
   G__memvar_setup((void*)((long)(&p->m1end)-(long)(p)),114,0,0,-1,-1,-1,1,"m1end=",0,"pre-rise end sample   有用");
   G__memvar_setup((void*)((long)(&p->peak_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"peak_sample=",0,"peak sample   有用");
   G__memvar_setup((void*)((long)(&p->base_sample)-(long)(p)),114,0,0,-1,-1,-1,1,"base_sample=",0,"base sample   有用");
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),105,0,0,-1,-1,-1,1,"baseline=",0,"计算得到  (m2begin+m2end)/2");
   G__memvar_setup((void*)((long)(&p->traceLen)-(long)(p)),114,0,0,-1,-1,-1,1,"traceLen=",0,"波形长度 4 ");
   G__memvar_setup((void*)((long)(&p->trace)-(long)(p)),115,0,0,-1,-1,-1,1,"trace[8192]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LEDts)-(long)(p)),109,0,0,-1,-1,-1,1,"LEDts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CFDts)-(long)(p)),109,0,0,-1,-1,-1,1,"CFDts=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DFMAEVENT */
static void G__setup_memvarDFMAEVENT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT));
   { DFMAEVENT *p; p=(DFMAEVENT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ehi)-(long)(p)),105,0,0,-1,-1,-1,1,"ehi=",0,"WAS SHORT INT    计算得到 (postrisesum-prerisesum)/10");
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),115,0,0,-1,-1,-1,1,"id=",0,"通过 board_id 和 chan_id 运算得到");
   G__memvar_setup((void*)((long)(&p->tpe)-(long)(p)),114,0,0,-1,-1,-1,1,"tpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tid)-(long)(p)),114,0,0,-1,-1,-1,1,"tid=",0,"通过变量 id 转换而来。实际的探测器编号");
   G__memvar_setup((void*)((long)(&p->board_id)-(long)(p)),114,0,0,-1,-1,-1,1,"board_id=",0,"硬件信息");
   G__memvar_setup((void*)((long)(&p->chan_id)-(long)(p)),114,0,0,-1,-1,-1,1,"chan_id=",0,"硬件信息");
   G__memvar_setup((void*)((long)(&p->LEDts)-(long)(p)),109,0,0,-1,-1,-1,1,"LEDts=",0,"extract the LED time stamp");
   G__memvar_setup((void*)((long)(&p->CFDts)-(long)(p)),109,0,0,-1,-1,-1,1,"CFDts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PEAKts)-(long)(p)),109,0,0,-1,-1,-1,1,"PEAKts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flag)-(long)(p)),99,0,0,-1,-1,-1,1,"flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pu)-(long)(p)),99,0,0,-1,-1,-1,1,"pu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d2t0)-(long)(p)),105,0,0,-1,-1,-1,1,"d2t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d2t1)-(long)(p)),105,0,0,-1,-1,-1,1,"d2t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d2t2)-(long)(p)),105,0,0,-1,-1,-1,1,"d2t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wheel)-(long)(p)),105,0,0,-1,-1,-1,1,"wheel=",0,"extract wheel");
   G__memvar_setup((void*)((long)(&p->prevTS)-(long)(p)),109,0,0,-1,-1,-1,1,"prevTS=",0,"上一个事件的ts");
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),105,0,0,-1,-1,-1,1,"baseline=",0,"基线");
   G__memvar_setup((void*)((long)(&p->postrisesum)-(long)(p)),105,0,0,-1,-1,-1,1,"postrisesum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prerisesum)-(long)(p)),105,0,0,-1,-1,-1,1,"prerisesum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2_last_beg)-(long)(p)),105,0,0,-1,-1,-1,1,"m2_last_beg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m2_last_end)-(long)(p)),105,0,0,-1,-1,-1,1,"m2_last_end=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prerisebeg)-(long)(p)),105,0,0,-1,-1,-1,1,"prerisebeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->preriseend)-(long)(p)),105,0,0,-1,-1,-1,1,"preriseend=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->postrisebeg)-(long)(p)),105,0,0,-1,-1,-1,1,"postrisebeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->postriseend)-(long)(p)),105,0,0,-1,-1,-1,1,"postriseend=",0,"not used");
   G__memvar_setup((void*)((long)(&p->peaksample)-(long)(p)),105,0,0,-1,-1,-1,1,"peaksample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->basesample)-(long)(p)),105,0,0,-1,-1,-1,1,"basesample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->header_type)-(long)(p)),105,0,0,-1,-1,-1,1,"header_type=",0,"数据信息");
   G__memvar_setup((void*)((long)(&p->traceLen)-(long)(p)),114,0,0,-1,-1,-1,1,"traceLen=",0,"波形长度");
   G__memvar_setup((void*)((long)(&p->trace)-(long)(p)),115,0,0,-1,-1,-1,1,"trace[8192]=",0,"波形");
   }
   G__tag_memvar_reset();
}


   /* vector<wuDGSEVENT,allocator<wuDGSEVENT> > */
static void G__setup_memvarvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   { vector<wuDGSEVENT,allocator<wuDGSEVENT> > *p; p=(vector<wuDGSEVENT,allocator<wuDGSEVENT> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > */
static void G__setup_memvarvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   { vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > *p; p=(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<DGSEVENT,allocator<DGSEVENT> > */
static void G__setup_memvarvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   { vector<DGSEVENT,allocator<DGSEVENT> > *p; p=(vector<DGSEVENT,allocator<DGSEVENT> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<DFMAEVENT,allocator<DFMAEVENT> > */
static void G__setup_memvarvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   { vector<DFMAEVENT,allocator<DFMAEVENT> > *p; p=(vector<DFMAEVENT,allocator<DFMAEVENT> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarLinkDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncwuDGSEVENT(void) {
   /* wuDGSEVENT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT));
   // automatic default constructor
   G__memfunc_setup("wuDGSEVENT", 844, G__LinkDict_216_0_1, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("wuDGSEVENT", 844, G__LinkDict_216_0_2, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), -1, 0, 1, 1, 1, 0, "u 'wuDGSEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~wuDGSEVENT", 970, G__LinkDict_216_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LinkDict_216_0_4, (int) ('u'), G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), -1, 1, 1, 1, 1, 0, "u 'wuDGSEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwuDFMAEVENT(void) {
   /* wuDFMAEVENT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT));
   // automatic default constructor
   G__memfunc_setup("wuDFMAEVENT", 902, G__LinkDict_217_0_1, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("wuDFMAEVENT", 902, G__LinkDict_217_0_2, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), -1, 0, 1, 1, 1, 0, "u 'wuDFMAEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~wuDFMAEVENT", 1028, G__LinkDict_217_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LinkDict_217_0_4, (int) ('u'), G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), -1, 1, 1, 1, 1, 0, "u 'wuDFMAEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDGSEVENT(void) {
   /* DGSEVENT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT));
   // automatic default constructor
   G__memfunc_setup("DGSEVENT", 608, G__LinkDict_218_0_1, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DGSEVENT", 608, G__LinkDict_218_0_2, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), -1, 0, 1, 1, 1, 0, "u 'DGSEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DGSEVENT", 734, G__LinkDict_218_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LinkDict_218_0_4, (int) ('u'), G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), -1, 1, 1, 1, 1, 0, "u 'DGSEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDFMAEVENT(void) {
   /* DFMAEVENT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT));
   // automatic default constructor
   G__memfunc_setup("DFMAEVENT", 666, G__LinkDict_219_0_1, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DFMAEVENT", 666, G__LinkDict_219_0_2, (int) ('i'), G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), -1, 0, 1, 1, 1, 0, "u 'DFMAEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DFMAEVENT", 792, G__LinkDict_219_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LinkDict_219_0_4, (int) ('u'), G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), -1, 1, 1, 1, 1, 0, "u 'DFMAEVENT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR(void) {
   /* vector<wuDGSEVENT,allocator<wuDGSEVENT> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR));
   G__memfunc_setup("at",213,G__LinkDict_226_0_1, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__LinkDict_226_0_2, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__LinkDict_226_0_3, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__LinkDict_226_0_4, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__LinkDict_226_0_5, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__LinkDict_226_0_6, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__LinkDict_226_0_7, 107, -1, G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__LinkDict_226_0_8, 107, -1, G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_226_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_226_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - sz u 'wuDGSEVENT' 'wuDGSEVENT' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__LinkDict_226_0_11, 107, -1, G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__LinkDict_226_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_226_0_13, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_226_0_14, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDGSEVENT,allocator<wuDGSEVENT> >",3628,G__LinkDict_226_0_15, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDGSEVENT,allocator<wuDGSEVENT> >",3628,G__LinkDict_226_0_16, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n u 'wuDGSEVENT' 'wuDGSEVENT' 11 'wuDGSEVENT()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDGSEVENT,allocator<wuDGSEVENT> >",3628,G__LinkDict_226_0_17, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDGSEVENT,allocator<wuDGSEVENT> >",3628,G__LinkDict_226_0_18, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator' 10 - first u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__LinkDict_226_0_19, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__LinkDict_226_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__LinkDict_226_0_21, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("wuDGSEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__LinkDict_226_0_22, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDGSEVENT), G__defined_typename("wuDGSEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__LinkDict_226_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wuDGSEVENT' 'wuDGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__LinkDict_226_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_226_0_25, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - position u 'wuDGSEVENT' 'wuDGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_226_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - position u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator' 10 - first "
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_226_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - position k - 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::size_type' 0 - n "
"u 'wuDGSEVENT' 'wuDGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__LinkDict_226_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_226_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_226_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - first u 'vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__LinkDict_226_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<wuDGSEVENT,allocator<wuDGSEVENT> >", 3754, G__LinkDict_226_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR(void) {
   /* vector<wuDFMAEVENT,allocator<wuDFMAEVENT> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR));
   G__memfunc_setup("at",213,G__LinkDict_230_0_1, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__LinkDict_230_0_2, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__LinkDict_230_0_3, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__LinkDict_230_0_4, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__LinkDict_230_0_5, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__LinkDict_230_0_6, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__LinkDict_230_0_7, 107, -1, G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__LinkDict_230_0_8, 107, -1, G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_230_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_230_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - sz u 'wuDFMAEVENT' 'wuDFMAEVENT' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__LinkDict_230_0_11, 107, -1, G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__LinkDict_230_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_230_0_13, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_230_0_14, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >",3744,G__LinkDict_230_0_15, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >",3744,G__LinkDict_230_0_16, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n u 'wuDFMAEVENT' 'wuDFMAEVENT' 11 'wuDFMAEVENT()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >",3744,G__LinkDict_230_0_17, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >",3744,G__LinkDict_230_0_18, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator' 10 - first u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__LinkDict_230_0_19, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__LinkDict_230_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__LinkDict_230_0_21, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("wuDFMAEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__LinkDict_230_0_22, 117, G__get_linked_tagnum(&G__LinkDictLN_wuDFMAEVENT), G__defined_typename("wuDFMAEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__LinkDict_230_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wuDFMAEVENT' 'wuDFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__LinkDict_230_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_230_0_25, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - position u 'wuDFMAEVENT' 'wuDFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_230_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - position u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator' 10 - first "
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_230_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - position k - 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::size_type' 0 - n "
"u 'wuDFMAEVENT' 'wuDFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__LinkDict_230_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_230_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_230_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - first u 'vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__LinkDict_230_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >", 3870, G__LinkDict_230_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR(void) {
   /* vector<DGSEVENT,allocator<DGSEVENT> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR));
   G__memfunc_setup("at",213,G__LinkDict_234_0_1, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__LinkDict_234_0_2, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__LinkDict_234_0_3, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__LinkDict_234_0_4, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__LinkDict_234_0_5, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__LinkDict_234_0_6, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__LinkDict_234_0_7, 107, -1, G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__LinkDict_234_0_8, 107, -1, G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_234_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_234_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - sz u 'DGSEVENT' 'DGSEVENT' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__LinkDict_234_0_11, 107, -1, G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__LinkDict_234_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_234_0_13, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_234_0_14, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("vector<DGSEVENT,allocator<DGSEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DGSEVENT,allocator<DGSEVENT> >",3156,G__LinkDict_234_0_15, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DGSEVENT,allocator<DGSEVENT> >",3156,G__LinkDict_234_0_16, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n u 'DGSEVENT' 'DGSEVENT' 11 'DGSEVENT()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DGSEVENT,allocator<DGSEVENT> >",3156,G__LinkDict_234_0_17, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<DGSEVENT,allocator<DGSEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DGSEVENT,allocator<DGSEVENT> >",3156,G__LinkDict_234_0_18, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' 'vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator' 10 - first u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' 'vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__LinkDict_234_0_19, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<DGSEVENT,allocator<DGSEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__LinkDict_234_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__LinkDict_234_0_21, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("DGSEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__LinkDict_234_0_22, 117, G__get_linked_tagnum(&G__LinkDictLN_DGSEVENT), G__defined_typename("DGSEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__LinkDict_234_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DGSEVENT' 'DGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__LinkDict_234_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DGSEVENT,allocator<DGSEVENT> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_234_0_25, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - position u 'DGSEVENT' 'DGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_234_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - position u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' 'vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator' 10 - first "
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' 'vector<DGSEVENT,allocator<DGSEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_234_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - position k - 'vector<DGSEVENT,allocator<DGSEVENT> >::size_type' 0 - n "
"u 'DGSEVENT' 'DGSEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__LinkDict_234_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_234_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_234_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - first u 'vector<DGSEVENT,allocator<DGSEVENT> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__LinkDict_234_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<DGSEVENT,allocator<DGSEVENT> >", 3282, G__LinkDict_234_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR(void) {
   /* vector<DFMAEVENT,allocator<DFMAEVENT> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR));
   G__memfunc_setup("at",213,G__LinkDict_238_0_1, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__LinkDict_238_0_2, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__LinkDict_238_0_3, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__LinkDict_238_0_4, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__LinkDict_238_0_5, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__LinkDict_238_0_6, 117, G__get_linked_tagnum(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__LinkDict_238_0_7, 107, -1, G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__LinkDict_238_0_8, 107, -1, G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_238_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__LinkDict_238_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - sz u 'DFMAEVENT' 'DFMAEVENT' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__LinkDict_238_0_11, 107, -1, G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__LinkDict_238_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_238_0_13, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__LinkDict_238_0_14, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("vector<DFMAEVENT,allocator<DFMAEVENT> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DFMAEVENT,allocator<DFMAEVENT> >",3272,G__LinkDict_238_0_15, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DFMAEVENT,allocator<DFMAEVENT> >",3272,G__LinkDict_238_0_16, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n u 'DFMAEVENT' 'DFMAEVENT' 11 'DFMAEVENT()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DFMAEVENT,allocator<DFMAEVENT> >",3272,G__LinkDict_238_0_17, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<DFMAEVENT,allocator<DFMAEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DFMAEVENT,allocator<DFMAEVENT> >",3272,G__LinkDict_238_0_18, 105, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' 'vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator' 10 - first u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' 'vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__LinkDict_238_0_19, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<DFMAEVENT,allocator<DFMAEVENT> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__LinkDict_238_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__LinkDict_238_0_21, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("DFMAEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__LinkDict_238_0_22, 117, G__get_linked_tagnum(&G__LinkDictLN_DFMAEVENT), G__defined_typename("DFMAEVENT"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__LinkDict_238_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DFMAEVENT' 'DFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__LinkDict_238_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DFMAEVENT,allocator<DFMAEVENT> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_238_0_25, 117, G__get_linked_tagnum(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - position u 'DFMAEVENT' 'DFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_238_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - position u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' 'vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator' 10 - first "
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' 'vector<DFMAEVENT,allocator<DFMAEVENT> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__LinkDict_238_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - position k - 'vector<DFMAEVENT,allocator<DFMAEVENT> >::size_type' 0 - n "
"u 'DFMAEVENT' 'DFMAEVENT' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__LinkDict_238_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_238_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__LinkDict_238_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - first u 'vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__LinkDict_238_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<DFMAEVENT,allocator<DFMAEVENT> >", 3398, G__LinkDict_238_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncLinkDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalLinkDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcLinkDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__LinkDictLN_wuDGSEVENT = { "wuDGSEVENT" , 115 , -1 };
G__linked_taginfo G__LinkDictLN_wuDFMAEVENT = { "wuDFMAEVENT" , 115 , -1 };
G__linked_taginfo G__LinkDictLN_DGSEVENT = { "DGSEVENT" , 115 , -1 };
G__linked_taginfo G__LinkDictLN_DFMAEVENT = { "DFMAEVENT" , 115 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR = { "vector<wuDGSEVENT,allocator<wuDGSEVENT> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator = { "vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wuDGSEVENT,allocator<wuDGSEVENT> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR = { "vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator = { "vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR = { "vector<DGSEVENT,allocator<DGSEVENT> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator = { "vector<DGSEVENT,allocator<DGSEVENT> >::iterator" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DGSEVENT,allocator<DGSEVENT> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR = { "vector<DFMAEVENT,allocator<DFMAEVENT> >" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator = { "vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator" , 99 , -1 };
G__linked_taginfo G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DFMAEVENT,allocator<DFMAEVENT> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableLinkDict() {
  G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__LinkDictLN_wuDGSEVENT.tagnum = -1 ;
  G__LinkDictLN_wuDFMAEVENT.tagnum = -1 ;
  G__LinkDictLN_DGSEVENT.tagnum = -1 ;
  G__LinkDictLN_DFMAEVENT.tagnum = -1 ;
  G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR.tagnum = -1 ;
  G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator.tagnum = -1 ;
  G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableLinkDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_wuDGSEVENT),sizeof(wuDGSEVENT),-1,262144,(char*)NULL,G__setup_memvarwuDGSEVENT,G__setup_memfuncwuDGSEVENT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_wuDFMAEVENT),sizeof(wuDFMAEVENT),-1,262144,(char*)NULL,G__setup_memvarwuDFMAEVENT,G__setup_memfuncwuDFMAEVENT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_DGSEVENT),sizeof(DGSEVENT),-1,262144,(char*)NULL,G__setup_memvarDGSEVENT,G__setup_memfuncDGSEVENT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_DFMAEVENT),sizeof(DFMAEVENT),-1,262144,(char*)NULL,G__setup_memvarDFMAEVENT,G__setup_memfuncDFMAEVENT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR),sizeof(vector<wuDGSEVENT,allocator<wuDGSEVENT> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR,G__setup_memfuncvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDGSEVENTcOallocatorlEwuDGSEVENTgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR),sizeof(vector<wuDFMAEVENT,allocator<wuDFMAEVENT> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR,G__setup_memfuncvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlEwuDFMAEVENTcOallocatorlEwuDFMAEVENTgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR),sizeof(vector<DGSEVENT,allocator<DGSEVENT> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR,G__setup_memfuncvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlEDGSEVENTcOallocatorlEDGSEVENTgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR),sizeof(vector<DFMAEVENT,allocator<DFMAEVENT> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR,G__setup_memfuncvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgR);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_vectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__LinkDictLN_reverse_iteratorlEvectorlEDFMAEVENTcOallocatorlEDFMAEVENTgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupLinkDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupLinkDict()");
  G__set_cpp_environmentLinkDict();
  G__cpp_setup_tagtableLinkDict();

  G__cpp_setup_inheritanceLinkDict();

  G__cpp_setup_typetableLinkDict();

  G__cpp_setup_memvarLinkDict();

  G__cpp_setup_memfuncLinkDict();
  G__cpp_setup_globalLinkDict();
  G__cpp_setup_funcLinkDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncLinkDict();
  return;
}
class G__cpp_setup_initLinkDict {
  public:
    G__cpp_setup_initLinkDict() { G__add_setup_func("LinkDict",(G__incsetup)(&G__cpp_setupLinkDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initLinkDict() { G__remove_setup_func("LinkDict"); }
};
G__cpp_setup_initLinkDict G__cpp_setup_initializerLinkDict;

